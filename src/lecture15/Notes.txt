Nonlinear data structures: Tree ADT, Binary Tree ADT
What makes trees “nonlinear”?  Rather than elements having a sequential relationship, elements have a hierarchical
relationship (parent/child relationship, rather than before/after)

Key Terms:
Tree - hierarchical structure consisting of a collection of nodes connected by edges
Root - topmost node in a tree
Parent - each node in a tree (except for the root) has exactly one parent node, which is the connected node immediately
    above it
Child - each node in a tree has zero or more child nodes, which are the nodes connected immediately below it
Sibling - nodes that are children of the same parent are siblings
Internal - a node is called internal in a tree if it has one or more children
External - a node is called external in a tree if it has no children. External nodes are also called leaves
Leaf - another name for an external node
Ancestor - a node u is an ancestor of node v if u = v or u is an ancestor of the parent of v
Descendant - a node v is a descendant of node u if u is an ancestor of v
[Note that a node is always an ancestor and descendant of itself; if we wish to exclude the node itself we use the terms
    proper ancestor or proper descendant.
Edge - an edge of a tree is denoted by a pair of nodes such that one is the parent of the other
Path - a path is a sequence of nodes such that any two consecutive nodes in the path form an edge
Ordered - a tree is ordered if there is a meaningful linear order among the children of each node
Depth - the depth of a node is the number of proper ancestors of that node
Height - the height of a tree is equal to the maximum depth of its nodes
Proper/Full- a tree is a proper tree or full tree if each node has either 0 or the maximum number of children
Complete - a tree is complete if each level of the tree other than the last has the maximum number of possible nodes

Binary Tree
Every node has at most two children
Each node is labeled as being either a left child or right child
A left child precedes a right child in the order of children of a node [note that a binary tree is an ordered tree].

Trees can be defined recursively: a tree is either empty or consists of a root node r and a set of subtrees whose roots
    are the child nodes of r.

Position interface (effectively unchanged)
E getElement()

Tree ADT (interface)
Position root()
Position parent(Position)
Iterable<Position> children(Position)
int numChildren(Position)
boolean isInternal(Position)
boolean isExternal(Position)
boolean isRoot(Position)
int size()
boolean isEmpty()
Iterator<E> iterator()
Iterable<Position> positions()

AbstractTree
boolean isInternal(Position)
boolean isExternal(Position)
boolean isRoot(Position)
boolean isEmpty()
int depth(Position)
int height(Position)

BinaryTreeADT (interface)
Position left(Position) //left child
Position right(Position) //right child
Position sibling(Position)

AbstractBinaryTree
Position sibling(Position)
int numChildren(Position)
Iterable<Position> children(Position)

Supplemental Reading:
Textbook Ch 8.1 - 8.2 p. 308 - 322

Homework:

1 - A binary tree is a tree where each node has at most 2 children.  An m-ary tree is a tree where each node has at most
 m children.  Draw
a - A full 3-ary tree with at least 5 nodes
b - A complete 3-ary tree with at least 5 nodes

2 - What is the worst-case big O runtime for the depth(...) method implementation in the AbstractTree class, where n is
the number of elements in the tree?
Answer: O(n)

3 - What is the worst-case big O runtime for the height(...) method implementation in the AbstractTree class, where n is
the number of elements in the tree?
Answer