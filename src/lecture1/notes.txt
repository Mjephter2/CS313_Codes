Supplemental readings:

Textbook Ch. 1 - Java fundamentals review

Textbook Ch. 2 - Intermediate Java, OOP (inheritance, exceptions, generics)

Homework:

1 Using the code for the Box class from lecture (posted here on Blackboard for reference), write a main method that
attempts to create a box with a negative width. Catch the exception with a try/catch block and print the exception message.

2 Using the code for the Box class from lecture (posted here on Blackboard for reference), write the code to define a
DividedBox class that can store two objects (each of a different generic type). Update methods as needed.

3 Using the code for the Box class from lecture (posted here on Blackboard), write the code to define a ShippingCrate
class. This class should also inherit from the ShippableContainer class. A ShippingCrate contains zero or more Boxes.
The maximum amount of Boxes a ShippingCrate can contain is dependent on the maximum volume of the ShippingCrate
(i.e. three 10x10x10 Boxes can fit in a 15x15x15 ShippingContainer, but not 4. This is obviously a bit of a simplification
of how the real world works). A ShippingCrate can only contain Boxes of the same type (i.e., only Boxes of Strings or
Boxes of Integers).

4 Without writing any code, create UML diagrams to model the necessary classes, methods, and fields that might be used
in an e-reader program. A user of this program should be able to purchase new books, browse their library of purchased
books, and read books in their library. (Note: This question is intended as program design practice. There are many
potential solutions.)