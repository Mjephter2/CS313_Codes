Postfix notation and Stacks; Queues

Stacks: computing arithmetic expression in postfix notation

A Queue is a linear data structure that follows a first in, first out (FIFO) access pattern.

Queue ADT
void enqueue(E) //similar to a Stack: one method to add elements, one to remove
E dequeue()
//for convenience:
E first()
int size()
boolean isEmpty()

LinkedList-based implementation

Array-based implementation

CircularQueue

void rotate();


Using a Queue to simulate musical chairs


Supplemental Reading
    Textbook Ch. 6.2 p. 238 - 247
Oracle documentation https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/Queue.html

Postfix notation http://www.cs.csi.cuny.edu/~zelikovi/csc326/data/assignment5.htm


Homework:
1 - A CircularQueue is very straightforward to implement with a CircularlyLinkedList, since CircularlyLinkedList already has
 a rotate() method.  However, it is also possible to implement a CircularQueue with an array. Modify the ArrayQueue to
 create a CircularArrayQueue class that implements CircularQueue. (done)

2 - In the previous lecture, we compared a Stack implemented with an array and a Stack implemented with a SinglyLinkedList.
 In each implementation, the efficiency of each method was O(1), but the one disadvantage of the array-based implementation
 was the fixed capacity.  For homework, you were asked to implement a Stack with an ArrayList, eliminating the array-based
 disadvantage of a fixed capacity. However, we cannot use an ArrayList to eliminate this disadvantage for a Queue - why not?
 Answer:

3 - Modify the postfix computation code to include exponents.  Consider an exponent to be represented by a “^” operator.
(done)