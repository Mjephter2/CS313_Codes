An Abstract Data Type, or ADT, equates to an interface in Java - a list of methods.
We can consider an ADT as separate from the implementation of its methods.

Essential List ADT/interface:
void set(int, T), T get(int), void add(int, T), T remove(int), int size(), boolean isEmpty()

Other useful methods:
T[] clone(), boolean equals(T[]), int search(T), boolean remove(T), sort(),

Implementation of the List ADT using an array

Supplemental Readings:
    Textbook Ch 7.1 -7.2, p. 258 - 269
    Documentation: List interface, AbstractList class, ArrayList class
    https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/List.html
    https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/AbstractList.html
    https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/ArrayList.html

Homework

1 Which methods described in our basic List interface might result in an exception being thrown?
    void set(int i, E e);
    void add(int i, E e);
    E get(int i);
    E remove(int i);

2 Of each of the methods described in our basic List interface that accept arguments, what arguments
and array state result in the worst case possible runtime (there may be a tie)?
    void add(int i, E e);       O(n)
    E remove(int i);            O(n)

3 Imagine a method removeRange(int, int) that takes two indices as arguments.
The method removes all the elements starting at the first index and ending at the last index.
Implement the removeRange(...) method in code so that your method calls the normal remove(...) method
to remove each element in the range - what is the runtime estimate (big O) for this implementation?
Then try implementing removeRange(...) without use of the remove(...) method - what is the best runtime you can achieve?