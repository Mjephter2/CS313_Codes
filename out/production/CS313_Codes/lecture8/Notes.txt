Iterator, Iterable, ListIterator

An iterator is an object used to scan through a sequence of elements using a cursor (in a similar fashion to a positional
list)

Iterable interface //some data structure that can be iterated through with an iterator
    Iterator<E> iterator()

Iterator interface //the actual object that acts as the cursor
    boolean hasNext()
    E next() throws NoSuchElementException
    void remove() throws IllegalStateException //technically optional

Iterator is fairly limited, but this allows many data structures to implement it (see the Oracle documentation for
Iterable to see which classes utilize Iterators - link below).  Additionally, data structures that implement Iterable
are able to use the For-Each loop:
    for (E element : myStructure) {
        System.out.println(element);
    }

A “snapshot” iterator is one that makes a copy of the data at the time it is created, so any changes made to the original
data or the iterator don’t affect each other.  A “lazy” iterator is one that makes references directly to the original
data, so changes to one do affect the other.

ListIterator is an Iterator with additional functionality suited to Lists which matches what we are able to achieve with
the PositionalList ADT.  (Note that there is no corresponding ListIterable interface, as with the Iterator and Iterable
interfaces).


ListIterator interface
    boolean hasNext()
    E next() //throws NoSuchElementException
    boolean hasPrevious()
    E previous() //throws NoSuchElementException
    int nextIndex()
    int previousIndex()
    //optional operations:
        void set(E)
        void add(E)
        void remove()


[We will not implement a ListIterator for DoublyLinkedList; the functionality is similar in concept to what we can
achieve with the LinkedPositionalList, but I believe the subtle differences will contribute to confusion.]

Note that Java does not have a built-in PositionalList, though it does have Iterator, Iterable, and ListIterator

Supplemental Reading:
Textbook Ch. 7.4 p. 282 - 289
Oracle documentation:
    Iterable: https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Iterable.html
    Iterator: https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/Iterator.html
    ListIterator: https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/ListIterator.html
For-Each loop: https://docs.oracle.com/javase/8/docs/technotes/guides/language/foreach.html


Homework:

1 - In the lecture code, we implemented the Iterator classes for ArrayList and DoublyLinkedList as inner classes so that
they could access private variables.  Implement an ArrayIterator and a LinkedIterator in separate files (i.e. not as
inner classes). (done)

2 - A PositionalList is very similar in concept to an Iterator or a ListIterator, and in general can accomplish the same
tasks.  However, PositionalList lacks a couple of the methods of Iterator and ListIterator.

    a - Implement the boolean hasNext() and boolean hasPrevious() methods for the LinkedPositionalList class (using the code
from lecture).

    b - Implement the int nextIndex() and int previousIndex() methods for the LinkedPositionalList class (using the code from
 lecture).  Note that with some creativity, it is possible to make these methods run in O(1) time.