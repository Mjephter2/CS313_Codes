Deques

A Deque, or double-ended queue, is a linear data structure that supports insertion and deletion at both the front and
back positions.

Deque ADT
void addFirst(E)
void addLast(E)
E removeFirst()
E removeLast()

//for convenience:
E first()
E last()
int size()
boolean isEmpty()

LinkedList-based implementation

Dynamic Array-based implementation (Circular array concept, similar to Queue implementation, but able to resize)

Comparison with Java.util.Deque

A note on the modulus operator in Java and negative values: modulus is computer prior to negation.  For example, -1 % 10
will result in -1, when it should result in 9. This cannot be avoided even if we place -1 in parentheses.  As a solution,
we can add the modulus to the initial operand to make it positive, which will result in the correct computation,
i.e. (-1 + 10) % 10 = 9 % 10 = 9.

Supplemental Reading:
    Textbook Ch. 6.3 p. 248 - 251 (done)

Homework:

1 - Modify the ArrayQueue class from lecture 10 so that the underlying array dynamically resizes. (done)

2 - It appears that LinkedList implementations of Stacks, Queues, and Deques are very straightforward and each of their
methods runs in O(1) time, so is there a reason to favor an Array-based implementation?  As we know, array structures
can provide efficient access (though not efficient insertion or deletion) to elements at internal positions. Implement
the methods E get(int) and void set(int, E) for ArrayDeque. (done)
Answer: If we need a list with a fix size, then the array-based implementation is as good as the linkedList
implementation, otherwise, the linkedList implementation is faster.

3 - To demonstrate the generality of Deques, implement the PostfixParsing program from lecture 10 using a Deque instead of
a Stack (done)